name: data-access-layer CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  pull-requests: write

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    env:
      Solution_Name: data-access-layer.sln
      Test_Project_Path: data-access-layer.Tests/data-access-layer.Tests.csproj

    steps:
      - name: running on OS
        run:
          echo ${{runner.os}}

      - name: git checkout
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: install dotnet '8.0.100-rc.2.23502.2'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.100-rc.2.23502.2'

      - name: restore dependencies
        run: dotnet restore

      - name: build
        run: |
            dotnet build --configuration Release --no-restore
            dotnet publish -c Release -o ./published

      - name: test
        run: dotnet test --no-restore --verbosity normal --collect:"XPlat Code Coverage" -p:CollectCoverage=true -p:CoverletOutput=TestResults/ -p:CoverletOutputFormat=opencover data-access-layer.Tests/

      # nuget package https://samlearnsazure.blog/2021/07/27/publishing-a-nuget-package-to-github-packages/
      - name: pack package
        run: dotnet pack data-access-layer/data-access-layer.csproj -c Release

      - name: prep packages
        run: dotnet nuget add source --username fkostya --password ${{ secrets.NUGET_PACKAGE }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/fkostya/index.json"

      - name: publish to GitHub packages
        if: runner.os == 'Linux'
        run: dotnet nuget push data-access-layer/bin/Release/*.nupkg --api-key ${{ secrets.NUGET_PACKAGE }}  --source "github" --skip-duplicate
        # end nuget package

      - name: generate code coverage report
        uses: irongut/CodeCoverageSummary@v1.3.0
        if: runner.os == 'Linux'
        with:
          filename: data-access-layer.Tests/TestResults/**/coverage.cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

      - name: add coverage PR comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
           recreate: true
           path: code-coverage-results.md

      - name: test2
        run: dotnet test --no-restore --no-build --verbosity normal -p:CollectCoverage=true -p:CoverletOutput=TestResults/ -p:CoverletOutputFormat=opencover

     # Execute code coverage for unit tests results in the solution
      - name: code coverage badge
        uses: simon-k/dotnet-code-coverage-badge@v1.0.0
        id: create_coverage_badge
        with:
           label: code coverage
           color: green
           path: data-access-layer.Tests/TestResults/coverage.opencover.xml
           gist-filename: code-coverage-dal.json
           gist-id: 48e686c342c7317c22ad034a57c17f69
           gist-auth-token: ${{ secrets.GIST_AUTH_TOKEN }}

      - name: print code coverage
        run: |
            echo "Code coverage percentage ${{steps.create_coverage_badge.outputs.percentage}}%"
            echo "Badge data: ${{steps.create_coverage_badge.outputs.badge}}"